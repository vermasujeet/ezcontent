<?php

/**
 * @file
 * Module file for ezcontent_smart_article.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\file\Entity\File;
use Drupal\Component\Utility\Html;
use Drupal\Component\Serialization\Json;
use Drupal\Core\Entity\ContentEntityForm;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Ajax\ReplaceCommand;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ezcontent_smart_article_form_node_form_alter(&$form, FormStateInterface $form_state) {
  if (in_array($form['#form_id'], [
    'node_smart_article_edit_form',
    'node_smart_article_form',
  ])) {
    // Make Company name Autocomplete.
    $form['field_company_name']['widget'][0]['value']['#autocomplete_route_name'] = 'ezcontent_smart_article.autocomplete.companies';
    // Add a generate summary button and hide body field.
    $form['generate_summary'] = [
      '#type' => 'submit',
      '#name' => 'generate_summary',
      '#value' => t('Generate Summary'),
      '#weight' => 11,
      '#ajax' => [
        'callback' => 'ezcontent_smart_article_generate_callback',
        'wrapper' => 'form-summary-generate-wrapper',
        'effect' => 'fade',
        'event' => 'click',
        'progress' => [
          'type' => 'throbber',
          'message' => 'Please wait...',
        ],
      ],
    ];
    $form['#attached']['library'][] = 'ezcontent_smart_article/ezcontent_smart_article_libs';

    if (isset($form['body'])) {
      if ($form['body']['widget'][0]['#default_value'] == '') {
        $form['body']['#attributes']['class'][] = 'hide-body--field';
        $form['body']['#attributes']['style'] = 'display:none;';
      }
    }
    // Check if smart summary exist.
    if (isset($form['field_smart_text_summary']['widget'][0]['summary'])) {
      $form['field_smart_text_summary']['widget'][0]['summary_container']['number_of_sentences']['#states'] = [
        'visible' => [
          ':input[name="field_smart_text_summary[0][summary_container][summary_type]"]' => ['value' => 'extractive'],
        ],
      ];
      $form['field_smart_text_summary']['widget'][0]['summary_container']['generate_smart_summary']['#ajax'] = [
        'callback' => 'ezcontent_smart_summary_generate_callback',
        'wrapper' => 'form-smart-summary-generate-wrapper',
        'effect' => 'fade',
        'event' => 'click',
        'progress' => [
          'type' => 'throbber',
          'message' => 'Please wait...',
        ],
      ];
      // Add submit handler to update summary.
      $form['actions']['submit']['#submit'][] = 'update_summary_field_submit_handler';
    }
    // Add a process to field_company_logo.
    if (!empty($form['field_company_logo'])) {
      $form['field_company_logo']['widget'][0]['#process'][] = 'ezcontent_smart_article_get_alt_title';
    }

  }

  // Smarttags process
  $bundle = '';
  $entityType = '';
  $form_object = $form_state->getFormObject();
  if ($form_object instanceof ContentEntityForm) {
    $bundle = $form_object->getEntity()->bundle();
    $entityType = $form_object->getEntity()->getEntityTypeId();
    $targetId = $form_object->getEntity();
  }
  $form['#attached']['library'][] = 'ezcontent_smart_article/ezcontent_smart_article_libs';
  if(!empty($entityType) && !empty($bundle)) {
    $fieldDefinitions = \Drupal::service('entity_field.manager')->getFieldDefinitions($entityType, $bundle);
    $results = \Drupal::service('ezcontent_smart_article.generate_smarttags');
    $termReferenceField = $results->findTermReferenceFieldsForEntityType($fieldDefinitions, $entityType, $bundle);
    if(!empty($termReferenceField)) {
      foreach($termReferenceField as $termFieldKey => $termFieldValue) {
        foreach($termFieldValue as $termKey => $termValue) {
          $refTagField = $fieldDefinitions[$termValue];
          $refTagFieldSettings = $refTagField->getSettings('long_text_fields');
          $form['message'] = array(
            '#type' => 'markup',
            '#weight' => -10,
            '#markup' => '<span class="validate-message"></span>'
          );
          if(isset($form[$termValue])) {
            $form[$termValue]['link_field'] = array(
              '#type' => 'hidden',
              '#value' => $refTagFieldSettings['long_text_fields']
            );
            $form[$termValue]['auto_tags'] = array (
              '#prefix' => '<div id="auto-tags">',
              '#suffix' => '</div>',
              '#weight' => 0
            );
            $form[$termValue]['smart_tags_submit'] = array(
              '#type' => 'submit',
              '#value' => t('Generate Tags'),
              '#weight' => 1,
              '#ajax' => array(
            'callback' => 'generate_tags_form_submit',
            'wrapper' => 'generate-tags'
        ),
            );
          }
        }
      }
    }
  }
}

/**
 * Summary generator callback.
 *
 * @todo: Move to a service.
 */
function ezcontent_smart_article_generate_callback(&$form, FormStateInterface $form_state) {
  $results = \Drupal::service('ezcontent_smart_article.companies_list');
  $company_name = $form_state->getValue('field_company_name')[0]['value'];
  $text = $results->getData($company_name, 'article');

  $response = new AjaxResponse();
  $arguments = [$text, 'edit-body-0-value'];
  $response->addCommand(new InvokeCommand(NULL, "update_text_editor", $arguments));
  $response->addCommand(new InvokeCommand('.hide-body--field', 'show'));
  return $response;
}

/**
 * Summary generator callback.
 *
 * @todo: Move to a service.
 */
function ezcontent_smart_summary_generate_callback(&$form, FormStateInterface $form_state) {
  $generate_summary = \Drupal::service('ezcontent_smart_article.generate_summary');
  $summary_type = $form_state->getValue('field_smart_text_summary')[0]['summary_container']['summary_type'];
  $number_of_sentences = $form_state->getValue('field_smart_text_summary')[0]['summary_container']['number_of_sentences'];
  $article = Html::decodeEntities(strip_tags($form_state->getValue('field_smart_text_summary')[0]['value']));
  $text = Json::decode($generate_summary->generateSummary($article, $summary_type, $number_of_sentences));
  $summary = $text['data']['data']['summary'];

  $response = new AjaxResponse();
  $arguments = [$summary, 'edit-field-smart-text-summary-0-summary-container-summary-area'];
  $response->addCommand(new InvokeCommand(NULL, "update_summary_text", $arguments));
  return $response;
}
/**
 * Summary generator callback.
 *
 * @todo: Move to a service.
 */
function update_summary_field_submit_handler(&$form, FormStateInterface $form_state) {
  $entity = $form_state->getFormObject()->getEntity();
  $summary = $form_state->getValue('field_smart_text_summary')[0]['summary_container']['summary_area'];
  $entity->get('field_smart_text_summary')->summary = $summary;
  $entity->save();
}

/**
 * Process callback: Adds the ALT title to image.
 *
 * @todo: Move to a service.
 *
 * @param array $element
 *   Form API element.
 *
 * @return array $element
 */
function ezcontent_smart_article_get_alt_title(array $element, FormStateInterface $form_state, array &$form) {
  $item = $element['#value'];
  if (!empty($item['fids'])) {
    $file = File::load($item['fids'][0]);
    $image_file = file_get_contents(\Drupal::service('file_system')->realpath($file->getFileUri()));

    $url = \Drupal::config('summary_generator.settings')->get('image_captioning_api_url');
    $response = \Drupal::service('http_client')->request('POST', $url, [
      'headers' => [
        'content-type' => $file->getMimeType(),
      ],
      'body' => $image_file,
    ]);
    if ($response->getStatusCode() == 200) {
      $body = \Drupal::service('serialization.json')->decode($response->getBody()->getContents());
      $element['alt']['#default_value'] = $body['data']['caption'];
    }

  }
  return $element;
}

/**
 * Implements form submit handler for smarttags.
 */
function generate_tags_form_submit(array $form, FormStateInterface $form_state) {
  $response = new AjaxResponse();
  $renderer = \Drupal::service('renderer');
  $node = $form_state->getFormObject()->getEntity();
  $linkField = $form_state->getValue('link_field');
  $linkFieldLable = $node->$linkField->getFieldDefinition()->getLabel();
  $field = $form_state->getValue($linkField);
  if(empty($field[0]['value'])){
    \Drupal::messenger()->addMessage(t("$linkFieldLable field required."), 'error', TRUE);
    $message = [
      '#theme' => 'status_messages',
      '#message_list' => drupal_get_messages(),
    ];
    $messages = $renderer->render($message);
    $class = 'error';
    $linkFieldId = str_replace('_', '-', $linkField);
    $response->addCommand(new HtmlCommand('.validate-message', $messages));
    $response->addCommand(new InvokeCommand("#edit-$linkFieldId-0-value", 'addClass', [$class]));
  } else {
    $results = \Drupal::service('ezcontent_smart_article.generate_smarttags');
    $tags = $results->getData($field[0]['value']);
    if ($tags) {
      $tagsData = '<ul class="tag-wrapper">';
      foreach($tags as $tagKey => $tagValue) {
        $tagsData .= "<li>$tagValue</li>";
      }
      $tagsData .= '</ul>';
      $autoTags = [
        '#title'=>'Auto Tags',
        '#type'=>'markup',
        '#name'=>'autotags',
        '#markup'=> $tagsData,
        '#prefix' => '<div id="tag-field-wrapper">',
        '#suffix' => '</div>'
      ];
      $renderedField = $renderer->render($autoTags);
      $response->addCommand(new ReplaceCommand('#auto-tags', $renderedField));
    }
  }
  return $response;
}
